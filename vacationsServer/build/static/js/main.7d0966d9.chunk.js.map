{"version":3,"sources":["serviceWorker.ts","redux/action-type.ts","models/Vacation.ts","redux/store.ts","redux/reducer.ts","redux/app-state.ts","utils/LoginUtils.ts","components/Header/Header.tsx","models/UserLoginDetails.ts","components/Login/Login.tsx","models/getAllVacationsFromServer.ts","components/AllVacationsBoard/AllVacationsBoard.tsx","components/Footer/Footer.tsx","models/UserRegisterDetails.ts","utils/FieldsUtils.ts","components/Register/Register.tsx","components/EditModal/EditModal.tsx","components/NewVacationModal/NewVacationModal.tsx","components/Admin/diagram.png","components/Admin/new.png","components/AdminGraph/BarChart.tsx","components/AdminGraph/AdminGraph.tsx","components/Admin/Admin.tsx","components/PrivateRoute/PrivateRoute.tsx","components/Layout/Layout.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionType","Vacation","id","description","destination","picture","fromDate","toDate","price","isLiked","followersAmount","store","createStore","oldAppState","action","newAppState","type","handleVacationEditModal","vacationToEdit","payload","isEditModalVisible","handleNewVacationModal","vacationToAdd","isNewVacationModalVisible","handleAdminGraphVisibility","isAdminGraphVisible","updateUserLoginStatus","userName","isUserLoggedIn","userType","logOutUser","socket","setUserSocket","File","LoginUtils","Component","updateReduxStoreOnLogin","isLoggedIn","dispatch","socketIOClient","query","sessionStorage","getItem","connect","getState","disconnect","handleUnloggedUser","a","token","loginWithToken","axios","defaults","headers","common","post","response","serverResponse","data","toast","success","error","saveUserDetailsOnSession","setItem","Header","props","unsubscribeStore","getHelloMessageContent","state","helloMessage","clear","getLogOutButton","onClick","disabled","this","subscribe","setState","className","UserLoginDetails","password","Login","setUserName","args","target","value","setPassword","login","validateInputs","warning","userLoginDetails","history","push","console","log","length","onSubmit","event","preventDefault","placeholder","onChange","autoComplete","Button","form","component","NavLink","to","getAllVacationsFromServer","get","allVacations","VacationsBoard","componentDidUpdate","changeHistory","setSocketListeners","on","vacationID","selectedIndex","getIndexFromVacations","vacations","splice","updatedVacation","map","vacation","index","addedVacation","changeDateFormat","date","newDateArray","split","findIndex","x","toggleFavorite","newLikeState","vacationId","emit","newState","order","b","Array","sort","key","src","toString","alt","getVacationFavoriteClass","JSON","stringify","Footer","UserRegistrationDetails","firstName","lastName","FieldsUtils","validateField","input","min","inputValidator","validateInput","innerHTML","isToDateBigger","Date","Register","firstNameValidator","lastNameValidator","userNameValidator","passwordValidator","setFirstName","isFirstNameValid","setLastName","isLastNameValid","isUserNameValid","isPasswordValid","element","current","isUserNameExists","undefined","registerNewUser","areInputsValid","warn","userRegistrationDetails","React","createRef","ref","onBlur","EditModal","handleClose","isDatesCollapserOpen","hideModal","setCollapserState","collapserButtonText","convertDateFormat","saveVacationChanges","editedVacation","originalVacation","FormData","append","FieldUtils","res","filename","saveEditChanges","setFromDate","setToDate","setPicture","files","setDestination","setDescription","setPrice","isModalVisible","Modal","open","onClose","maxLength","isOpened","NewVacationModal","updateNewVacationPicture","addNewVacation","validation","isNewVacationValid","multerResponse","name","BarChart","labels","datasets","label","item","options","maintainAspectRatio","plugins","colorschemes","scheme","scales","yAxes","ticks","beginAtZero","stepSize","width","height","AdminGraph","isGraphVisible","animation","show","onHide","backdrop","keyboard","closeButton","Title","Body","Admin","newVacation","hideEditModal","hideNewVacationModal","hideAdminGraphModal","promptDeleteDialog","confirmAlert","title","message","buttons","deleteVacation","indexOf","openEditVacationModal","openAdminGraphModal","graphPicture","openNewVacationModal","newIcon","PrivateRoute","path","exact","Layout","AllVacationsBoard","ReactDOM","render","StrictMode","position","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7d0966d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ActionType {\r\n    SendVacationToUpdate,\r\n    handleVacationEditModal,\r\n    updateUserLoginStatus,\r\n    logOutUser,\r\n    setUserSocket,\r\n    handleNewVacationModal,\r\n    handleAdminGraphVisibility\r\n}","export class Vacation {\r\n    public constructor(\r\n        public id?: number,\r\n        public description?: string,\r\n        public destination?: string,\r\n        public picture?: File,\r\n        public fromDate?: string,\r\n        public toDate?: string,\r\n        public price?: number,\r\n        public isLiked?: boolean,\r\n        public followersAmount?: number \r\n    ){}\r\n    \r\n}","import { createStore } from \"redux\";\r\nimport { reduce } from \"./reducer\";\r\nimport { AppState } from \"./app-state\";\r\n\r\nexport const store = createStore(reduce, new AppState());\r\n\r\n","import { AppState } from \"./app-state\";\r\nimport { ActionType } from \"./action-type\";\r\nimport { Action } from \"./action\";\r\n\r\n// This function is NOT called direcrtly by you\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n    // Cloning the oldState (creating a copy)\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n\r\n        case ActionType.handleVacationEditModal:\r\n            newAppState.vacationToEdit = action.payload[0];\r\n            newAppState.isEditModalVisible = action.payload[1];\r\n            break;\r\n        \r\n        case ActionType.handleNewVacationModal:\r\n            newAppState.vacationToAdd = action.payload[0];\r\n            newAppState.isNewVacationModalVisible = action.payload[1];\r\n            break;\r\n\r\n        case ActionType.handleAdminGraphVisibility:\r\n            newAppState.isAdminGraphVisible = action.payload;\r\n            break;\r\n\r\n        case ActionType.updateUserLoginStatus:\r\n            newAppState.userName = action.payload[0];\r\n            newAppState.isUserLoggedIn = action.payload[1];\r\n            newAppState.userType = action.payload[2];\r\n            break;\r\n\r\n        case ActionType.logOutUser:\r\n            newAppState.isUserLoggedIn = action.payload;\r\n            newAppState.socket = \"\";\r\n            break;\r\n\r\n        case ActionType.setUserSocket:\r\n            newAppState.socket = action.payload;\r\n            break;\r\n\r\n\r\n        // case ActionType.PushToUnLikedVacations:\r\n        //     newAppState.unLikedVacations.push(action.payload);\r\n        //     break;\r\n\r\n        // case ActionType.GetAllCoupons:\r\n        //     newAppState.coupons = action.payload;\r\n        //     break;\r\n    }\r\n\r\n    // After returning the new state, it's being published to all subscribers\r\n    // Each component will render itself based on the new state\r\n    return newAppState;\r\n}","import { Vacation } from \"../models/Vacation\";\r\n\r\nexport class AppState {\r\n    public vacationToAdd: Vacation = new Vacation(0, \"\", \"\" , new File([\"\"], \"\"), \"\" ,\"\" ,0 ,false ,0);\r\n    public isNewVacationModalVisible: boolean = false;\r\n\r\n    public vacationToEdit: Vacation;\r\n    public isEditModalVisible: boolean = false;\r\n\r\n    public isAdminGraphVisible: boolean = false;\r\n\r\n    public isUserLoggedIn: boolean;\r\n    public userName: string = \"\";\r\n    public socket: any = \"\";\r\n    public userType: string = \"\";\r\n}","import { Component } from 'react'\r\nimport { ActionType } from '../redux/action-type';\r\nimport { store } from '../redux/store';\r\nimport axios from 'axios';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { SuccessfulLoginServerResponse } from '../models/SuccessfulLoginServerResponse';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\n\r\nexport default class LoginUtils extends Component {\r\n\r\n    // function that updates redux store after login with username, user type, and sets the isLoggedIn variable to true\r\n    static updateReduxStoreOnLogin = (userName:string, isLoggedIn:boolean, userType: string) => {\r\n        store.dispatch({ type: ActionType.updateUserLoginStatus, payload: [userName, isLoggedIn, userType] });\r\n    }\r\n\r\n    // function that sets the user socket and return it\r\n    static setUserSocket = () => {\r\n        let socket = socketIOClient(window.location.hostname, { query: \"token=\" + sessionStorage.getItem(\"token\")}).connect();\r\n        store.dispatch({ type: ActionType.setUserSocket, payload: socket});\r\n        return socket;\r\n    }\r\n\r\n    // log user out function\r\n    static logOutUser = () => {\r\n        // disconnect the socket\r\n        let socket = store.getState().socket;\r\n        socket.disconnect();\r\n\r\n        // update redux store \r\n        store.dispatch({ type: ActionType.logOutUser, payload: false });\r\n    }\r\n\r\n    // function that handles with unlogged user that might have token\r\n    static handleUnloggedUser = async () =>{\r\n        let token = sessionStorage.getItem(\"token\");\r\n        \r\n        if (token === null || token === \"undefined\"){\r\n            return \"exit\";\r\n        }\r\n        else{\r\n            await LoginUtils.loginWithToken(token);\r\n        }\r\n    }\r\n\r\n    // function that tries log in with token only\r\n    static loginWithToken = async (token: string) => {\r\n        try {\r\n            axios.defaults.headers.common['authorization'] = \"Bearer \" + token;\r\n            const response =  await axios.post<SuccessfulLoginServerResponse>(\"https://adar-vacations.herokuapp.com/users/logUserWithToken\");\r\n            const serverResponse = response.data;\r\n\r\n            toast.success(\"Welcome Back \" + serverResponse.userName + \"!\")\r\n\r\n            LoginUtils.updateReduxStoreOnLogin(serverResponse.userName, true, serverResponse.userType);\r\n\r\n            LoginUtils.setUserSocket();\r\n        }\r\n        catch (err) {\r\n            toast.error(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    // function that saves user details on session storage\r\n    public static saveUserDetailsOnSession = (serverResponse: any) =>{\r\n        sessionStorage.setItem(\"token\", serverResponse.token);\r\n        sessionStorage.setItem(\"userName\", serverResponse.userName);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Unsubscribe } from 'redux';\r\nimport { store } from '../../redux/store';\r\nimport \"./Header.css\";\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport  LoginUtils  from '../../utils/LoginUtils';\r\n\r\n\r\ninterface headerState {\r\n    isUserLoggedIn: boolean,\r\n    userName: string,\r\n    helloMessage: string\r\n}\r\n\r\nexport default class Header extends Component<any, headerState> {\r\n    \r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            isUserLoggedIn: store.getState().isUserLoggedIn,\r\n            userName: store.getState().userName,\r\n            helloMessage: \"Hello guest\"\r\n        };\r\n    }\r\n\r\n    // Get states from redux for header\r\n    componentDidMount(){\r\n        this.unsubscribeStore = store.subscribe(() => this.setState({\r\n            isUserLoggedIn: store.getState().isUserLoggedIn,\r\n            userName: store.getState().userName\r\n         }));\r\n    }\r\n\r\n    // stop subscribing after leaving the component\r\n    componentWillUnmount(){\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    // get Hello Message Content according to log in status\r\n    private getHelloMessageContent = () =>{\r\n        let newState = {...this.state};\r\n        let helloMessage = newState.helloMessage;\r\n\r\n        if (this.state.isUserLoggedIn){\r\n            helloMessage = (\"Hello \" + this.state.userName);\r\n        }\r\n        else{\r\n            helloMessage = (\"Hello guest\");\r\n        }\r\n\r\n        return (helloMessage);\r\n    } \r\n\r\n    // log user out\r\n    private logOutUser = async () =>{\r\n        try{\r\n            let token =  sessionStorage.getItem(\"token\");\r\n            axios.defaults.headers.common['authorization'] = \"Bearer \" + token;\r\n            await axios.post(\"https://adar-vacations.herokuapp.com/users/logOutUser/\");\r\n\r\n            // clear session storage so he wont have useless data and wont be able to login until he relogs\r\n            sessionStorage.clear();\r\n            LoginUtils.logOutUser();\r\n        }\r\n        // catch in case of failure\r\n        catch (err){     \r\n        toast.error(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    // dynamic log in button, if user isn't logged in he will just get \"please login\"\r\n    private getLogOutButton = () =>{\r\n        if (this.state.isUserLoggedIn){\r\n            return(<button onClick={this.logOutUser}>Logout\r\n                    </button>)\r\n        }\r\n        return(<button disabled>Please login</button>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                    <button id=\"helloMessage\" disabled>{this.getHelloMessageContent()}\r\n                    </button>\r\n                <h1>\r\n                    Adar's Vacations Site\r\n                </h1>\r\n                {this.getLogOutButton()}\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export class UserLoginDetails{\r\n    public constructor(\r\n        public userName?:string,\r\n        public password?:string\r\n    ){}\r\n\r\n}","import React, { ChangeEvent, Component } from 'react';\r\nimport axios from \"axios\"\r\nimport {NavLink } from 'react-router-dom';\r\nimport { Button } from '@material-ui/core';\r\nimport \"../Register/Register.css\";\r\nimport { UserLoginDetails } from '../../models/UserLoginDetails';\r\nimport { SuccessfulLoginServerResponse } from '../../models/SuccessfulLoginServerResponse';\r\nimport { toast } from 'react-toastify';\r\nimport  LoginUtils  from '../../utils/LoginUtils';\r\n\r\ninterface LoginState {\r\n    userName: string,\r\n    password: string\r\n}\r\n\r\nexport default class Login extends Component <any, LoginState>{\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            userName : \"\",\r\n            password : \"\"\r\n        };\r\n    }\r\n    \r\n    \r\n    async componentDidMount(){\r\n        // if user have token try to log in\r\n        let response = await LoginUtils.handleUnloggedUser();\r\n        // recieved \"exit\" its impossible to log in the user with the existing token\r\n        if (response !==\"exit\"){\r\n            this.props.history.push(\"/vacationsboard\");\r\n            return\r\n        }\r\n    }\r\n\r\n    // setState username function\r\n    private setUserName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const userName = args.target.value;\r\n        this.setState({userName});\r\n    }\r\n    // setState password function\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        this.setState({password});\r\n    }\r\n\r\n    // make sure that the inputs are valid by length so server wont have to deal with useless reuqests\r\n    private validateInputs(){\r\n        if (this.state.userName===\"\" || this.state.password===\"\"){\r\n            return false;\r\n        }\r\n        if (this.state.userName.length > 12 || this.state.userName.length < 3 ||\r\n            this.state.password.length < 6 || this.state.password.length > 12){\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    private login = async () => {\r\n\r\n        if (this.validateInputs()===false){\r\n            toast.warning(\"Please fill valid username and password!\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            let userLoginDetails = new UserLoginDetails(this.state.userName, this.state.password);\r\n\r\n            // send the server post with the username and password\r\n            const response =  await axios.post<SuccessfulLoginServerResponse>(\"https://adar-vacations.herokuapp.com/users/login\", userLoginDetails);\r\n            const serverResponse = response.data;\r\n            \r\n            // callback for static function that updates redux in case of successfull login\r\n            LoginUtils.updateReduxStoreOnLogin(this.state.userName, true, serverResponse.userType);\r\n\r\n            // callback for static function that saves user details on session storage\r\n            LoginUtils.saveUserDetailsOnSession(serverResponse);\r\n\r\n            toast.success(\"Welcome Back \" + this.state.userName + \"!\")\r\n\r\n            // if the user is admin the redirect him to admin page, else, just user page\r\n            if (serverResponse.userType === \"ADMIN\") {\r\n                this.props.history.push('/admin')\r\n                sessionStorage.setItem(\"userType\", \"ADMIN\");\r\n            }\r\n            else{\r\n                this.props.history.push('/vacationsboard')\r\n                sessionStorage.setItem(\"userType\", \"USER\");\r\n            }\r\n            // callback for static function that sets user socket\r\n            LoginUtils.setUserSocket();\r\n        }\r\n\r\n        // catch error \r\n        catch (err) {\r\n            toast.error(err.response.data.error);\r\n            console.log(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"entranceDiv\">\r\n                <h2>Login</h2>\r\n                <form id=\"form1\" onSubmit={(event) => event.preventDefault()}>\r\n                <table>\r\n                    <tbody id=\"loginTable\">\r\n                        <tr>\r\n                            <td>\r\n                            Username:\r\n                            </td>\r\n                            <td>\r\n                                <input placeholder=\"Username\" \r\n                                 value={this.state.userName}\r\n                                 onChange={this.setUserName}\r\n                                 type=\"text\"></input>\r\n                            </td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                            <td>\r\n                            Password:\r\n                            </td>\r\n                            <td>\r\n                                <input placeholder=\"Password\" \r\n                                autoComplete=\"on\"\r\n                                type=\"password\"\r\n                                onChange={this.setPassword}\r\n                                value={this.state.password}>\r\n                                    \r\n                                </input>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                </form>\r\n\r\n\r\n                <Button id=\"loginButton\" type=\"submit\" form=\"form1\" className=\"button\" onClick={this.login}>\r\n                    LOGIN\r\n                </Button>\r\n                <br></br><br></br>\r\n\r\n\r\n\r\n                Don't have an account?<br></br>\r\n                <Button component={NavLink} to=\"/register\" className=\"button\">\r\n                    Register\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n\r\n// get all vacations from server function\r\nexport const getAllVacationsFromServer = async () => {\r\n    try {\r\n        let token = sessionStorage.getItem(\"token\");\r\n        axios.defaults.headers.common['authorization'] = \"Bearer \" +  token;\r\n        \r\n        const response = await axios.get(\"https://adar-vacations.herokuapp.com/vacations\");\r\n        const allVacations = response.data;\r\n\r\n        return allVacations;\r\n    }\r\n\r\n    catch(error){\r\n        return error;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport 'material-design-icons/iconfont/material-icons.css';\r\nimport { Vacation } from '../../models/Vacation';\r\nimport { getAllVacationsFromServer } from '../../models/getAllVacationsFromServer';\r\nimport axios from \"axios\";\r\nimport \"./VacationsBoard.css\";\r\nimport { Unsubscribe } from 'redux';\r\nimport { store } from '../../redux/store';\r\nimport LoginUtils from '../../utils/LoginUtils';\r\n\r\n\r\ninterface vacationsState{\r\n    vacations: Vacation[]\r\n    isUserLoggedIn: boolean\r\n    socket: any\r\n}\r\n\r\nexport default class VacationsBoard extends Component <any, vacationsState>{\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            vacations : new Array<Vacation>(),\r\n            isUserLoggedIn: store.getState().isUserLoggedIn,\r\n            socket: store.getState().socket,\r\n        };\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        // redirect user if he is not logged in\r\n        if (store.getState().isUserLoggedIn !== true){\r\n            // try to log in if he have token\r\n            let response = await LoginUtils.handleUnloggedUser();\r\n            // if couldnt login with token just redirect to login\r\n            if (response ===\"exit\"){\r\n                this.props.history.push(\"/\");\r\n                return\r\n            }\r\n        }    \r\n\r\n        // request all vacations from server\r\n        const allVacations = await getAllVacationsFromServer();\r\n        this.setState({ vacations: allVacations });\r\n        \r\n        // set socket \r\n        this.setState({ socket : store.getState().socket });\r\n\r\n        // listen to redux changes\r\n        this.unsubscribeStore = store.subscribe(\r\n            () => this.setState(\r\n                {\r\n                    isUserLoggedIn: store.getState().isUserLoggedIn,\r\n                    socket: store.getState().socket\r\n                }, () => {\r\n                    // listen to the changes in the state - handles the case that the user logged out. \r\n                    this.changeHistory();\r\n                })\r\n        );\r\n        // callback for set socket listeners function\r\n        this.setSocketListeners();\r\n    }\r\n    componentWillUnmount (){\r\n        // stop subscribing after leaving the component\r\n        this.unsubscribeStore()\r\n    }\r\n\r\n    // in any change of user type or login status redirect\r\n    componentDidUpdate = () =>{\r\n        if (!store.getState().isUserLoggedIn){\r\n            this.props.history.push(\"/\");\r\n        }\r\n        if (store.getState().userType === \"ADMIN\"){\r\n            this.props.history.push(\"/admin\");\r\n        }\r\n    }\r\n\r\n    private changeHistory = async () =>{\r\n        if (!this.state.isUserLoggedIn){\r\n            // this.socket.disconnect\r\n            this.props.history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    private setSocketListeners = () =>{\r\n        // listener for vacation likes from socket\r\n        this.state.socket.on(\"increase-vacation-likes\", (vacationID: number) => {\r\n            let selectedIndex = this.getIndexFromVacations(vacationID);\r\n            let allVacations = this.state.vacations;\r\n\r\n            // increase vacation followers by 1\r\n            allVacations[selectedIndex].followersAmount = allVacations[selectedIndex].followersAmount+1;\r\n            this.setState({vacations: allVacations});\r\n        });  \r\n        \r\n        // listener for vacation dislikes from socket\r\n        this.state.socket.on(\"decrease-vacation-likes\", (vacationID: number) => {\r\n            let selectedIndex = this.getIndexFromVacations(vacationID);\r\n            let allVacations = this.state.vacations;\r\n            \r\n            // decrease vacation followers by 1\r\n            allVacations[selectedIndex].followersAmount = allVacations[selectedIndex].followersAmount-1;\r\n            this.setState({vacations: allVacations});\r\n        });\r\n\r\n        // listener for delete vacation from socket\r\n        this.state.socket.on(\"delete-vacation\", (vacationID: number) => {\r\n            let selectedIndex = this.getIndexFromVacations(vacationID);\r\n            let allVacations = this.state.vacations;\r\n            \r\n            // remove the deleted vacation from vacations array\r\n            allVacations.splice(selectedIndex, 1);\r\n            this.setState({vacations: allVacations});\r\n        });  \r\n\r\n        // listener for vacation updates from socket\r\n        this.state.socket.on(\"update-vacation\", (updatedVacation: Vacation) => {\r\n            let allVacations = this.state.vacations;\r\n            // run through all vacations\r\n            \r\n            allVacations = allVacations.map(vacation => {\r\n                // if its the correct vacation, replace it with the updated one\r\n                if (vacation.id === updatedVacation.id){\r\n                    let index = this.getIndexFromVacations(vacation.id);\r\n                    allVacations[index] = updatedVacation;\r\n                    this.setState({vacations: allVacations});\r\n                    return updatedVacation;\r\n                }\r\n                return vacation;\r\n            })\r\n        }); \r\n\r\n        // get added vacation from socket\r\n        this.state.socket.on(\"add-vacation\", (addedVacation: Vacation) => {\r\n            addedVacation.fromDate = this.changeDateFormat(addedVacation.fromDate);\r\n            addedVacation.toDate = this.changeDateFormat(addedVacation.toDate);\r\n\r\n            // push new vacation to vacations array\r\n            let allVacations = this.state.vacations;\r\n            allVacations.push(addedVacation);\r\n            \r\n            this.setState({vacations: allVacations});\r\n        });\r\n    }\r\n\r\n    // dates come out in wrong format, so this function just reformatting the dates to match the other vacations\r\n    private changeDateFormat = (date: string):string =>{\r\n        let newDateArray = date.split(\"-\");\r\n        let newDate = newDateArray[2] + \"/\" + newDateArray[1] + \"/\" + newDateArray[0];\r\n        \r\n        return newDate;\r\n    }\r\n\r\n    // returns index of vacation that needs update\r\n    private getIndexFromVacations = (vacationID: number) =>{\r\n        let allVacations = this.state.vacations;\r\n        let selectedIndex = allVacations.findIndex(\r\n            x => x.id === vacationID\r\n        );\r\n        return selectedIndex;\r\n    }\r\n\r\n    // on like click function\r\n    private toggleFavorite = async (vacation:Vacation) =>{\r\n        // toggle favorite status\r\n        let newLikeState = !vacation.isLiked;\r\n        const socket = this.state.socket;\r\n\r\n        // if now its liked then send like to server, else send dislike\r\n        if (newLikeState){\r\n            await axios.post(\"https://adar-vacations.herokuapp.com/vacations/addToFavorites/\",{vacationId: vacation.id});\r\n            vacation.followersAmount= vacation.followersAmount+1;\r\n            socket.emit(\"increase-vacation-likes\", vacation.id);\r\n        }\r\n        else{\r\n            await axios.post(\"https://adar-vacations.herokuapp.com/vacations/removeFromFavorites/\",{vacationId: vacation.id});\r\n            vacation.followersAmount = vacation.followersAmount-1;\r\n            socket.emit(\"decrease-vacation-likes\", vacation.id);\r\n        }\r\n\r\n        // update the vacation in the array\r\n        vacation.isLiked = newLikeState;\r\n        let newState = {...this.state};\r\n        this.setState(newState);\r\n    }\r\n\r\n    // get favorite css class icon\r\n    public static getVacationFavoriteClass = (isLiked: boolean) =>{\r\n        if (isLiked){\r\n            return \"material-icons liked\"\r\n        }\r\n        return \"material-icons\"\r\n    }\r\n\r\n    // function that sorts the vacations by likes amount\r\n    private order = (a: Vacation, b: Vacation) => {\r\n        if (a.isLiked > b.isLiked) {\r\n            return -1;\r\n        } else if (a.isLiked < b.isLiked) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"allVacationsBoard\" className=\"scrollbar scrollbar-morpheus-den\">\r\n            <h1 className=\"headers\">All Vacations</h1>\r\n                <div id=\"vacationsBoard\">\r\n                    {this.state.vacations.sort((a, b) => this.order(a, b)).map( (vacation, index) =>\r\n\r\n                        <div key={index} className=\"card\">\r\n                            <img className=\"card-img-top\" src={vacation.picture.toString()}\r\n                            alt=\"../../UndefinedPictures/defaultPicture.jpg\"></img>\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{vacation.destination}</h5>\r\n                                <p className=\"desc\">{vacation.description}</p>\r\n                                <p className=\"card-text\"><b>From Date: </b>{vacation.fromDate}</p>\r\n                                <p className=\"card-text\"><b>To Date: </b>{vacation.toDate}</p>\r\n                                <h5 className=\"card-title\">{vacation.price}$</h5>\r\n\r\n                                <div className=\"favoritesContainer\">\r\n                                    <span className={VacationsBoard.getVacationFavoriteClass(vacation.isLiked)}\r\n                                    onClick={()=>{\r\n                                        this.toggleFavorite(vacation)\r\n                                        }}>favorite</span>\r\n                                    <span className=\"followersAmount\" id={JSON.stringify(vacation.id)}>{vacation.followersAmount} Liked it</span>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport \"./Footer.css\";\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <p>All rights reserved to Adar Abadian&trade;</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export class UserRegistrationDetails{\r\n    public constructor(\r\n        public firstName?:string,       \r\n        public lastName?:string,\r\n        public userName?:string,\r\n        public password?:string\r\n    ){}\r\n}","import { Component } from 'react'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class FieldsUtils extends Component {\r\n    \r\n    static validateField = (input:string, min:number, inputValidator: any) => {\r\n        if (FieldsUtils.validateInput(input, min, inputValidator) === \"tooShort\"){\r\n            return false;\r\n        }\r\n        if (FieldsUtils.validateInput(input, min, inputValidator) === \"tooLong\"){\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    // passing all params, except for maxlength which is 12 for all params \r\n    static validateInput = (input: string, min: number, inputValidator: any) =>{\r\n        if (input.length < min){\r\n            inputValidator.innerHTML = (\"This Input Is Too Short &nbsp; &nbsp; Min Length Is \" + min + \" Characters  &#10060\");\r\n            return \"tooShort\";\r\n        }\r\n        if (input.length > 12){\r\n            inputValidator.innerHTML = (\"This Input Is Too Long &nbsp; &nbsp;Max Length Is \" + 12 + \" Characters  &#10060\");\r\n            return \"tooLong\";\r\n        }\r\n        inputValidator.innerHTML = (\"This Input Is Valid  &#9989;\")\r\n        return \"valid\";\r\n    }\r\n\r\n    // validate that to date is bigger than from date\r\n    static isToDateBigger = (fromDate:any, toDate:any) =>{\r\n        if (new Date(fromDate) > new Date (toDate)){\r\n            toast.warning(\"To date cant be later than from date!\");\r\n            return false;\r\n        }\r\n        if (new Date(fromDate) < new Date()){\r\n            toast.warning(\"From date is already passed!\\nPlease fill a new one\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n}\r\n","import React, { ChangeEvent, Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport \"./Register.css\";\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from \"axios\";\r\nimport { UserRegistrationDetails } from '../../models/UserRegisterDetails';\r\nimport { SuccessfulLoginServerResponse } from '../../models/SuccessfulLoginServerResponse';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { toast } from 'react-toastify';\r\nimport FieldsUtils from '../../utils/FieldsUtils';\r\nimport LoginUtils from '../../utils/LoginUtils';\r\n\r\ninterface RegistrationState {\r\n    firstName:        string,\r\n    lastName:         string,\r\n    userName:         string,\r\n    password:         string,\r\n\r\n    isFirstNameValid:   boolean,\r\n    isLastNameValid:    boolean,\r\n    isUserNameValid:    boolean,\r\n    isPasswordValid:    boolean\r\n}\r\n\r\nexport default class Register extends Component <any, RegistrationState> {\r\n    firstNameValidator: React.RefObject<HTMLTableRowElement>;\r\n    lastNameValidator:  React.RefObject<HTMLTableRowElement> ;\r\n    userNameValidator:  React.RefObject<HTMLTableRowElement> ;\r\n    passwordValidator:  React.RefObject<HTMLTableRowElement> ;\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: \"\",\r\n            lastName:  \"\",\r\n            userName:  \"\",\r\n            password:  \"\",\r\n\r\n            isFirstNameValid: false,\r\n            isLastNameValid: false,\r\n            isUserNameValid: false,\r\n            isPasswordValid: false\r\n        };\r\n\r\n        this.firstNameValidator = React.createRef()\r\n        this.lastNameValidator = React.createRef()\r\n        this.userNameValidator = React.createRef()\r\n        this.passwordValidator = React.createRef()\r\n    }\r\n\r\n    // SET STATES FROM INPUTS FUNCTIONS and validate them after change\r\n    private setFirstName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const firstName = args.target.value;\r\n        this.setState({firstName});\r\n\r\n        this.isFirstNameValid(args.target);\r\n    }\r\n    private setLastName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const lastName = args.target.value;\r\n        this.setState({lastName});\r\n        \r\n        this.isLastNameValid(args.target);\r\n    }\r\n    private setUserName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const userName = args.target.value;\r\n        this.setState({userName});\r\n        \r\n        this.isUserNameValid(args.target);\r\n    }\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n        this.setState({password});\r\n\r\n        this.isPasswordValid(args.target);\r\n    }\r\n\r\n    // this function is called only when registering, makes sure that user cant send any invalid data\r\n    private areInputsValid(){\r\n        if (this.state.isFirstNameValid === false || \r\n            this.state.isLastNameValid  === false ||  \r\n            this.state.isPasswordValid  === false || \r\n            this.state.isUserNameValid  === false ){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // check if firstname valid\r\n    private isFirstNameValid = (element: HTMLInputElement) => {\r\n        const inputValidator = this.firstNameValidator.current;\r\n        const min = 2;\r\n\r\n        // callback for static function that recieves value, min length, and the hook of the validator of the parameter\r\n        if (FieldsUtils.validateField(element.value, min, inputValidator) === false){\r\n            element.className=\"invalidInput\";\r\n            this.setState({isFirstNameValid: false});\r\n            return false;\r\n        };\r\n        \r\n        this.setState({isFirstNameValid: true});\r\n        element.className=\"validInput\"; \r\n    }\r\n\r\n    // check if lastname valid\r\n    private isLastNameValid = (element: HTMLInputElement) => {\r\n        const inputValidator = this.lastNameValidator.current;\r\n        const min = 2;\r\n\r\n        // callback for static function that recieves value, min length, and the hook of the validator of the parameter\r\n        if (FieldsUtils.validateField(element.value, min, inputValidator) === false){\r\n            element.className=\"invalidInput\";\r\n            this.setState({isLastNameValid: false});\r\n            return false;\r\n        };\r\n        \r\n        this.setState({isLastNameValid: true});\r\n        element.className=\"validInput\"; \r\n    }\r\n\r\n    // check if UserName valid\r\n    private isUserNameValid = (element: HTMLInputElement) => {\r\n        const inputValidator = this.userNameValidator.current;\r\n        const min = 3;\r\n\r\n        // callback for static function that recieves value, min length, and the hook of the validator of the parameter\r\n        if (FieldsUtils.validateField(element.value, min, inputValidator) === false){\r\n            element.className=\"invalidInput\";\r\n            this.setState({isUserNameValid: false});\r\n            return false;\r\n        };\r\n        \r\n        this.setState({isUserNameValid: true});\r\n        element.className=\"validInput\"; \r\n    }\r\n    \r\n    // check if password valid\r\n    private isPasswordValid = (element: HTMLInputElement) => {\r\n        const inputValidator = this.passwordValidator.current;\r\n        const min = 6;\r\n\r\n        // callback for static function that recieves value, min length, and the hook of the validator of the parameter\r\n        if (FieldsUtils.validateField(element.value, min, inputValidator) === false){\r\n            element.className=\"invalidInput\";\r\n            this.setState({isPasswordValid: false});\r\n            return false;\r\n        };\r\n        \r\n        this.setState({isPasswordValid: true});\r\n        element.className=\"validInput\"; \r\n    }\r\n\r\n    // function that being called after leaving the username input.\r\n    // checks if lengths are valid try to find out if username is already taken\r\n    private isUserNameExists = async (event: any) => {\r\n        let element = event.target;\r\n\r\n        try {\r\n            // check if length valid, if invalid just exit\r\n            let userName = {userName: this.state.userName};\r\n            if (userName.userName.length > 12 || userName.userName.length < 3){\r\n                return;\r\n            }\r\n\r\n            // send server username to figure out if username taken\r\n            const response =  await axios.post(\"https://adar-vacations.herokuapp.com/users/isUserNameExists\", userName);\r\n            const serverResponse = response.data;\r\n\r\n            // set input element with \"valid\" class\r\n            element.className=\"validInput\";\r\n\r\n            // set the input's validator with appropriate text\r\n            this.userNameValidator.current.innerHTML = \"This username is free to use!  &#9989;\";\r\n\r\n            // set state with valid user = true\r\n            this.setState({isUserNameValid: true});\r\n            toast.success(serverResponse);\r\n        }\r\n\r\n        catch (err) {\r\n            if(err.response === undefined){\r\n                toast(err);\r\n            }\r\n            // if username unavailable then give its input \"invalid\" class\r\n            element.className=\"invalidInput\";\r\n\r\n            // set the input's validator with appropriate text\r\n            this.userNameValidator.current.innerHTML = err.response.data.error;\r\n\r\n            // set state with valid user = false\r\n            this.setState({isUserNameValid: false});\r\n\r\n            toast.error(err.response.data.error);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    // register function\r\n    public registerNewUser = async () => {\r\n        // if inputs are invalid just return\r\n        if (this.areInputsValid() === false){\r\n            toast.warn(\"OOPS 😨, looks like you didn't filled the details correctly.\")\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // create userRegistrationDetails variable that contains the user details\r\n            let userRegistrationDetails = new UserRegistrationDetails(this.state.firstName, this.state.lastName, this.state.userName, this.state.password);\r\n\r\n            // send server the details\r\n            const response =  await axios.post<SuccessfulLoginServerResponse>(\"https://adar-vacations.herokuapp.com/users/register\", userRegistrationDetails);\r\n            const serverResponse = response.data;\r\n\r\n            // save the user details in session storage\r\n            await LoginUtils.saveUserDetailsOnSession(serverResponse);\r\n\r\n            // redirect him to user page\r\n            this.props.history.push('/vacationsboard');\r\n            \r\n            toast.success(\"Congratulations, Registered successfuly.\");\r\n        }\r\n        // catch if failed\r\n        catch (err) {\r\n            toast.error(err.response.data.error);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"entranceDiv\">\r\n                <h2>Register</h2>\r\n                    <form id=\"form1\" onSubmit={(event) => event.preventDefault()}>\r\n                        <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className=\"normalTableDivs\">First Name: </td>\r\n                                <td className=\"normalTableDivs\">\r\n                                    <input placeholder=\"First Name\" type=\"text\" id=\"firstName\"\r\n                                    value={this.state.firstName} onChange={this.setFirstName}\r\n                                    ></input>\r\n                                </td>\r\n                            </tr>\r\n                            <tr className=\"validator\" id=\"firstNameValidator\" ref={this.firstNameValidator}>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className=\"normalTableDivs\">Last Name: </td>\r\n                                <td className=\"normalTableDivs\">\r\n                                    <input placeholder=\"Last Name\" type=\"text\" id=\"lastName\"\r\n                                    value={this.state.lastName} onChange={this.setLastName}\r\n                                    ></input>\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                            <tr className=\"validator\" id=\"lastNameValidator\" ref={this.lastNameValidator}></tr>\r\n                            \r\n                            <tr>\r\n                                <td className=\"normalTableDivs\">Username: </td>\r\n                                <td className=\"normalTableDivs\">\r\n                                    <input placeholder=\"Username\" type=\"text\" id=\"userName\"\r\n                                    value={this.state.userName} onBlur={(event) =>{this.isUserNameExists(event)}} \r\n                                    onChange={this.setUserName}\r\n                                    ></input>\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                            <tr className=\"validator\" id=\"userNameValidator\" ref={this.userNameValidator}></tr>\r\n\r\n                            <tr>\r\n                                <td className=\"normalTableDivs\">Password: </td>\r\n                                <td className=\"normalTableDivs\">\r\n                                    <input \r\n                                    placeholder=\"Password\" \r\n                                    type=\"password\" \r\n                                    id=\"password\"\r\n                                    autoComplete=\"on\"\r\n                                    value={this.state.password} \r\n                                    onChange={this.setPassword}>\r\n                                </input>\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                            <tr className=\"validator\" id=\"passwordValidator\" ref={this.passwordValidator}></tr>\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n\r\n\r\n                    <Button  onClick={this.registerNewUser} type=\"submit\" form=\"form1\" className=\"button\">\r\n                    Create Account!\r\n                    </Button>\r\n                    \r\n                    <br></br><br></br>\r\n                    \r\n                    Forgot that you have an account?<br></br>\r\n\r\n                    <Button component={NavLink} to=\"/\" className=\"button\">\r\n                    Back To Login\r\n                    </Button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { Button } from '@material-ui/core';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport React, { ChangeEvent, Component } from 'react';\r\nimport { Vacation } from '../../models/Vacation';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { store } from '../../redux/store';\r\nimport './Modal.css';\r\nimport {Collapse} from 'react-collapse';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport FieldUtils from '../../utils/FieldsUtils';\r\n\r\ninterface modalState {\r\n    vacationToEdit: Vacation,\r\n    editedVacation: Vacation,\r\n    isModalVisible: boolean,\r\n    isDatesCollapserOpen: boolean,\r\n    collapserButtonText: string\r\n}\r\n\r\nexport default class EditModal extends Component<any, modalState>{\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            vacationToEdit:       store.getState().vacationToEdit,\r\n            editedVacation:       new Vacation(),\r\n            isModalVisible:       store.getState().isEditModalVisible,\r\n            isDatesCollapserOpen: false,\r\n            collapserButtonText:  \"Change vacations dates\"\r\n        };\r\n    }\r\n\r\n    // close modal function\r\n    private handleClose = () => {\r\n        store.dispatch({ type: ActionType.handleVacationEditModal, payload: [false, false] });\r\n        this.setState({isDatesCollapserOpen: false})\r\n        this.props.hideModal();\r\n    }\r\n\r\n    // just set state on mount\r\n    public componentDidMount() {\r\n        this.setState({ editedVacation: this.state.vacationToEdit });\r\n    }\r\n\r\n    // toggle the date collapser status\r\n    private setCollapserState = () =>{\r\n        let newState = {...this.state};\r\n        let isDatesCollapserOpen = !newState.isDatesCollapserOpen;\r\n        let collapserButtonText ;\r\n\r\n        // toggle the date collapser button text\r\n        if (isDatesCollapserOpen){\r\n            collapserButtonText = \"Keep the original dates\";\r\n        }\r\n        else{\r\n            collapserButtonText = \"Change vacations dates\";\r\n        }\r\n\r\n        // update state\r\n        this.setState({isDatesCollapserOpen, collapserButtonText});\r\n    }\r\n\r\n    // FUNCTIONS THAT REPLACES THE DATES FORMAT, JUST REPLACING \"YYYY\" PLACE WITH \"DD\" AND \"-\" WITH / \r\n    // this function just reformatting the dates to match the server dates format expectations\r\n    private convertDateFormat = (date: string):string =>{\r\n        let newDateArray = date.split(\"/\");\r\n        let newDate = newDateArray[2] + \"-\" + newDateArray[1] + \"-\" + newDateArray[0];\r\n        return newDate;\r\n    }\r\n    // dates come out in different format, so this function just reformatting the dates to match the other vacations in terms of UI\r\n    private changeDateFormat = (date: string):string =>{\r\n        let newDateArray = date.split(\"-\");\r\n        let newDate = newDateArray[2] + \"/\" + newDateArray[1] + \"/\" + newDateArray[0];\r\n        return newDate;\r\n    }\r\n\r\n    private saveVacationChanges = async () => {\r\n        let newState = {...this.state};\r\n        let editedVacation = newState.editedVacation;\r\n        let originalVacation = newState.vacationToEdit;\r\n\r\n        // Multer if pic changed delete original pic and upload new one\r\n        const data = new FormData();\r\n        data.append('fileToDelete', originalVacation.picture);\r\n        data.append('file', editedVacation.picture);\r\n\r\n        // if dates didn't changed then change formats\r\n        if (!this.state.isDatesCollapserOpen){\r\n            editedVacation.fromDate = this.convertDateFormat(originalVacation.fromDate);\r\n            editedVacation.toDate = this.convertDateFormat(originalVacation.toDate);\r\n        }\r\n        // validate that to date is bigger than from date\r\n        if (FieldUtils.isToDateBigger(editedVacation.fromDate, editedVacation.toDate) !== true){\r\n            return\r\n        };\r\n        // validate that to no date is empty\r\n        if (editedVacation.fromDate === \"\" || editedVacation.toDate === \"\"){\r\n            toast.warning(\"Please fill both dates!\")\r\n            return;\r\n        }\r\n\r\n        // if pic changed then replace it \r\n        if (editedVacation.picture !== originalVacation.picture) {\r\n            const res = await axios.post(\"https://adar-vacations.herokuapp.com/vacations/upload\", data, {});\r\n            editedVacation.picture = res.data.filename;\r\n        }\r\n\r\n        // close date collapser\r\n        this.setState({isDatesCollapserOpen: false}); \r\n\r\n        try {\r\n            // send edited vacation to server\r\n            await axios.post(\"https://adar-vacations.herokuapp.com/vacations/editVacation/\",editedVacation);\r\n            toast.success(\"Congratulations, The vacation was edited successfuly.\");\r\n\r\n            // hide Modal\r\n            this.props.hideModal();\r\n            \r\n            // change dates formats to match UI\r\n            editedVacation.fromDate = this.changeDateFormat(editedVacation.fromDate);\r\n            editedVacation.toDate = this.changeDateFormat(editedVacation.toDate);\r\n\r\n            this.props.saveEditChanges(editedVacation);\r\n        }\r\n        // catch if failed\r\n        catch (err) {\r\n            toast.error(err.response.data.error);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    // SET STATES FROM INPUTS FUNCTIONS\r\n    private setFromDate = (args: ChangeEvent<HTMLInputElement>) => { \r\n        let editedVacation = {...this.state.editedVacation};\r\n        editedVacation.fromDate = args.target.value;\r\n        this.setState({editedVacation})\r\n    }\r\n    private setToDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let editedVacation = {...this.state.editedVacation};\r\n        editedVacation.toDate = args.target.value;\r\n        this.setState({editedVacation})\r\n    }\r\n    private setPicture = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let editedVacation = {...this.state.editedVacation};\r\n        editedVacation.picture = args.target.files[0];\r\n        this.setState({editedVacation})\r\n    }\r\n    private setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let editedVacation = {...this.state.editedVacation};\r\n        editedVacation.destination = args.target.value;\r\n        this.setState({editedVacation})\r\n    }\r\n    private setDescription = (args: ChangeEvent<HTMLTextAreaElement>) => {    \r\n        let editedVacation = {...this.state.editedVacation};\r\n        editedVacation.description = args.target.value;\r\n        this.setState({editedVacation})\r\n    }\r\n    private setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let editedVacation = {...this.state.editedVacation};\r\n        editedVacation.price = +args.target.value;\r\n        this.setState({editedVacation})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"edit-modal\">\r\n                <Modal open={this.state.isModalVisible}\r\n                    onClose={this.handleClose}>\r\n                        \r\n                    <div id=\"editModal\">\r\n                        <h1>Edit Vacation</h1>\r\n                        <p className=\"cardAddText\">Photo address:<input type=\"file\" id=\"picture\" onChange={this.setPicture}\r\n                            // value={this.state.editedVacation.picture} \r\n                            placeholder=\"URL\"></input></p>\r\n\r\n                        <p className=\"cardAddText\">Destination:  <input onChange={this.setDestination}\r\n                            id=\"destination\" type=\"text\" maxLength={30}\r\n                            value={this.state.editedVacation.destination} placeholder=\"Destination\"></input></p>\r\n\r\n                        <p>Description: <textarea onChange={this.setDescription}\r\n                            id=\"description\" value={this.state.editedVacation.description}\r\n                            className=\"description\" placeholder=\"Description\"></textarea></p>\r\n\r\n                        <div className=\"smallInputsDiv\">\r\n                            <div id=\"dateSection\">\r\n                                <Button id=\"collapserToggler\" onClick={this.setCollapserState}\r\n                                 className=\"modalButtons\">\r\n                                    {this.state.collapserButtonText}\r\n                                </Button>\r\n\r\n                                <Collapse isOpened={this.state.isDatesCollapserOpen}>\r\n                                    <p className=\"cardAddText\">From Date: <input onChange={this.setFromDate}\r\n                                        id=\"fromDate\"\r\n                                        className=\"smallInputs\" type=\"date\"></input></p>\r\n\r\n                                    <p className=\"cardAddText\">To Date:  <input onChange={this.setToDate}\r\n                                     id=\"toDate\"\r\n                                        className=\"smallInputs\" type=\"date\"></input></p>\r\n                                </Collapse>\r\n                                \r\n                            </div>\r\n\r\n                            <p className=\"cardAddText\"><span id=\"priceOnModal\">Price:</span><input onChange={this.setPrice}\r\n                                id=\"price\"\r\n                                value={this.state.editedVacation.price}\r\n                                placeholder=\"Price\" className=\"smallInputs\" type=\"number\"></input></p>\r\n\r\n                            <div id=\"buttonsDiv\">\r\n                                <Button className=\"modalButtons\"\r\n                                onClick={this.saveVacationChanges}\r\n                                >Save Vacation</Button>\r\n\r\n                                <Button  className=\"modalButtons\"\r\n                                onClick={this.handleClose}\r\n                                >Cancel</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { Button } from '@material-ui/core';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport React, { ChangeEvent, Component } from 'react';\r\nimport { Vacation } from '../../models/Vacation';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { store } from '../../redux/store';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport './NewVacationModal.css';\r\nimport FieldUtils from '../../utils/FieldsUtils';\r\n\r\ninterface modalState {\r\n    vacationToAdd:  Vacation,\r\n    isModalVisible: boolean,\r\n    socket:         any\r\n}\r\n\r\nexport default class NewVacationModal extends Component<any, modalState>{\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            vacationToAdd:  store.getState().vacationToAdd,\r\n            isModalVisible: store.getState().isNewVacationModalVisible,\r\n            socket:         store.getState().socket\r\n        };\r\n    }\r\n\r\n    // close modal function\r\n    private handleClose = () => {\r\n        store.dispatch({ type: ActionType.handleNewVacationModal, payload: false });\r\n        this.props.hideModal();\r\n    }\r\n\r\n    // SET STATES FROM INPUTS FUNCTIONS\r\n    private setFromDate = (args: ChangeEvent<HTMLInputElement>) => { \r\n        let vacationToAdd = {...this.state.vacationToAdd};\r\n        vacationToAdd.fromDate = args.target.value;\r\n        this.setState({vacationToAdd})\r\n    }\r\n    private setToDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let vacationToAdd = {...this.state.vacationToAdd};\r\n        vacationToAdd.toDate = args.target.value;\r\n        this.setState({vacationToAdd})\r\n    }\r\n    private updateNewVacationPicture = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let vacationToAdd = {...this.state.vacationToAdd};\r\n        vacationToAdd.picture = args.target.files[0];\r\n        this.setState({vacationToAdd})\r\n    }\r\n    private setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let vacationToAdd = {...this.state.vacationToAdd};\r\n        vacationToAdd.destination = args.target.value;\r\n        this.setState({vacationToAdd})\r\n    }\r\n    private setDescription = (args: ChangeEvent<HTMLTextAreaElement>) => {    \r\n        let vacationToAdd = {...this.state.vacationToAdd};\r\n        vacationToAdd.description = args.target.value;\r\n        this.setState({vacationToAdd})\r\n    }\r\n    private setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        let vacationToAdd = {...this.state.vacationToAdd};\r\n        vacationToAdd.price = +args.target.value;\r\n        this.setState({vacationToAdd})\r\n    }\r\n\r\n    // validate that no parameter is empty\r\n    private isNewVacationValid(){\r\n        if (this.state.vacationToAdd.picture.name === \"\"){\r\n            return \"Picture\";\r\n        }\r\n        if (this.state.vacationToAdd.destination.length < 1){\r\n            return \"Destination\";\r\n        }\r\n        if (this.state.vacationToAdd.description.length < 1){\r\n            return \"Description\";\r\n        }\r\n        if (this.state.vacationToAdd.fromDate === \"\"){\r\n            return \"From Date\";\r\n        }\r\n        if (this.state.vacationToAdd.toDate === \"\"){\r\n            return \"To Date\";\r\n        }\r\n        if (this.state.vacationToAdd.price < 1){\r\n            return \"Price\";\r\n        }\r\n        \r\n        return \"valid\";\r\n    }\r\n\r\n    // add new vacation function\r\n    private addNewVacation = async() => {\r\n        // callback for validation function\r\n        let validation = this.isNewVacationValid();\r\n        if (validation !== \"valid\"){\r\n            // warn dynamicly about Inputs if isnt valid\r\n            toast.warning(\"Please Fill A Valid \" + validation + \" Before Uploading!\");\r\n            return false;\r\n        }\r\n                \r\n        // validate that to date is bigger than from date\r\n        if (FieldUtils.isToDateBigger(this.state.vacationToAdd.fromDate, \r\n            this.state.vacationToAdd.toDate) !== true){\r\n                return;\r\n            }\r\n\r\n        // attach pic to send to the server\r\n        // // // // // // // // // // // // // // // // // // // // // // // // // SHOULD BE LET\r\n        const data = new FormData()\r\n        data.append('file', this.state.vacationToAdd.picture);\r\n\r\n\r\n        try {\r\n            // send pic to the server\r\n            const multerResponse = await axios.post(\"https://adar-vacations.herokuapp.com/vacations/upload\", data, {})\r\n            this.state.vacationToAdd.picture = multerResponse.data.filename;\r\n\r\n            // send new vacation to server\r\n            let response = await axios.post(\"https://adar-vacations.herokuapp.com/vacations/addNewVacation/\",this.state.vacationToAdd);\r\n            \r\n            // recieve just the id of new vacation\r\n            this.state.vacationToAdd.id = response.data;\r\n\r\n            // close modal\r\n            store.dispatch({ type: ActionType.handleNewVacationModal, payload: [this.state.vacationToAdd, false] });\r\n            this.props.hideModal();\r\n\r\n            // send by socket to everyone the new vacation\r\n            this.state.socket.emit(\"add-vacation\", this.state.vacationToAdd);\r\n            \r\n            toast.success(\"Congratulations, The vacation was added successfuly.\");\r\n        }\r\n        // catch if failed\r\n        catch (err) {\r\n            toast.error(err.response.data.error);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal open={this.state.isModalVisible}\r\n                    onClose={this.handleClose}>\r\n                        \r\n                    <div id=\"editModal\">\r\n                    <div className=\"card\" id=\"addCard\">\r\n                        <h2 className=\"headers\">Add New Vacation</h2>\r\n                            <div className=\"card-body\">\r\n                                <p className=\"cardAddText\">Photo address:\r\n                                <input type=\"file\" onChange={this.updateNewVacationPicture}\r\n                                placeholder=\"URL\"></input></p>\r\n\r\n                                <p className=\"cardAddText\">Destination:\r\n                                <input onChange={this.setDestination} type=\"text\" maxLength={30}\r\n                                value={this.state.vacationToAdd.destination} placeholder=\"Destination\"></input></p>\r\n\r\n                                <p>Description: <textarea onChange={this.setDescription} value={this.state.vacationToAdd.description} \r\n                                className=\"description\" placeholder=\"Description\"></textarea></p>\r\n\r\n                                <div className=\"smallInputsDiv\">\r\n                                    <p className=\"cardAddText\">From Date: <input onChange={this.setFromDate}\r\n                                        value={this.state.vacationToAdd.fromDate} \r\n                                        className=\"smallInputs\" type=\"date\"></input></p>\r\n\r\n                                    <p className=\"cardAddText\">To Date:  <input onChange={this.setToDate}\r\n                                    value={this.state.vacationToAdd.toDate} \r\n                                        className=\"smallInputs\" type=\"date\"></input></p>\r\n                                        \r\n                                    <p className=\"cardAddText\">Price:    <input onChange={this.setPrice}\r\n                                        value={this.state.vacationToAdd.price} \r\n                                        placeholder=\"Price\" className=\"smallInputs\" type=\"number\"></input></p>\r\n                                </div>\r\n                            <Button onClick={this.addNewVacation}>Add Vacation!</Button>\r\n                            <Button onClick={this.handleClose}>Cancel</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/diagram.a38ee6b7.png\";","export default __webpack_public_path__ + \"static/media/new.45145c26.png\";","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-colorschemes';\r\nimport './graph.css';\r\n\r\nfunction BarChart(props:any) {\r\n  const data : any = {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: 'Vacation Followers ❤',\r\n          data: [], \r\n          // backgroundColor: ['red', 'blue', 'green'],\r\n        }\r\n      ],\r\n  }\r\n\r\n  const options : any = {\r\n      maintainAspectRatio: true,\r\n      plugins: {\r\n        colorschemes: {\r\n          scheme: 'brewer.SetTwo5'\r\n        }\r\n      },\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: true,\r\n              stepSize: 1,\r\n              min: 0,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n  }\r\n  \r\n  for (let item of props.props.props){\r\n    data.labels.push(item.destination);\r\n    data.datasets[0].data.push(item.followersAmount);\r\n  }\r\n\r\n  return <Bar data={data} options={options} width={800} height={500}/>\r\n}\r\n\r\nexport default BarChart","import React, { Component } from 'react'\r\nimport Modal from 'react-bootstrap/esm/Modal';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { store } from '../../redux/store';\r\nimport BarChart from './BarChart';\r\n\r\ninterface graphState {\r\n    isGraphVisible: boolean\r\n}\r\n\r\nexport default class AdminGraph extends Component<any, graphState>{\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            isGraphVisible: store.getState().isAdminGraphVisible,\r\n        };\r\n    }\r\n\r\n    // just set state on update\r\n    public componentDidMount () {\r\n        this.setState({isGraphVisible: store.getState().isAdminGraphVisible})\r\n    }\r\n    \r\n    // closes the modal\r\n    private handleClose = () => {\r\n        store.dispatch({ type: ActionType.handleAdminGraphVisibility, payload: false });\r\n        this.props.hideModal();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal animation={false}\r\n                show={this.state.isGraphVisible}\r\n                onHide={this.handleClose}\r\n                backdrop=\"static\"\r\n                keyboard={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Vacations Graph</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <div className=\"bar-chart\">\r\n                        <BarChart props={this.props}/>\r\n                    </div>\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer className=\"modal-footer\">\r\n                    {/* <Button className=\"remove-vacation-btn btn btn-info\" onClick={this.handleClose}>Close</Button> */}\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import { Button } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nimport { getAllVacationsFromServer } from '../../models/getAllVacationsFromServer';\r\nimport { Vacation } from '../../models/Vacation';\r\nimport '../AllVacationsBoard/VacationsBoard.css';\r\nimport'./Admin.css';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport EditModal from '../EditModal/EditModal'\r\nimport { Unsubscribe } from 'redux';\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\nimport LoginUtils from '../../utils/LoginUtils';\r\nimport NewVacationModal from '../NewVacationModal/NewVacationModal';\r\nimport graphPicture from './diagram.png';\r\nimport newIcon from './new.png';\r\nimport AdminGraph from '../AdminGraph/AdminGraph';\r\n\r\ninterface vacationsState{\r\n    vacations:                 Vacation[],\r\n    newVacation:               Vacation,\r\n    isEditModalVisible:        boolean,\r\n    isUserLoggedIn:            boolean,\r\n    userType:                  string,\r\n    isNewVacationModalVisible: boolean,\r\n    socket:                    any,\r\n    isAdminGraphVisible:       boolean\r\n}\r\n\r\nexport default class Admin extends Component <any, vacationsState>{\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            vacations :                new Array<Vacation>(),\r\n            newVacation:               store.getState().vacationToAdd,\r\n            isEditModalVisible:        store.getState().isEditModalVisible,\r\n            isUserLoggedIn:            store.getState().isUserLoggedIn,\r\n            userType:                  store.getState().userType,\r\n            isNewVacationModalVisible: store.getState().isNewVacationModalVisible,\r\n            socket:                    store.getState().socket,\r\n            isAdminGraphVisible:       store.getState().isAdminGraphVisible\r\n        };\r\n      \r\n    }  \r\n\r\n    async componentDidMount(){\r\n        // redirect user if he is not logged in\r\n        if (store.getState().isUserLoggedIn !== true){\r\n            // try to log in if he have token\r\n            let response = await LoginUtils.handleUnloggedUser();\r\n            // if couldnt login with token just redirect to login\r\n            if (response ===\"exit\"){\r\n                this.props.history.push(\"/\");\r\n                return\r\n            }\r\n        }  \r\n        // request all vacations from server\r\n        const allVacations = await getAllVacationsFromServer();\r\n        this.setState({ vacations: allVacations });\r\n\r\n        // set socket \r\n        this.setState({ socket : store.getState().socket });\r\n\r\n        // listen to redux changes\r\n        this.unsubscribeStore = store.subscribe(\r\n            () => this.setState(\r\n                {\r\n                    isUserLoggedIn:            store.getState().isUserLoggedIn,\r\n                    userType:                  store.getState().userType,\r\n                    newVacation:               store.getState().vacationToAdd,\r\n                    isEditModalVisible:        store.getState().isEditModalVisible,\r\n                    isNewVacationModalVisible: store.getState().isNewVacationModalVisible,\r\n                    isAdminGraphVisible:       store.getState().isAdminGraphVisible,\r\n                    \r\n                }, () => {\r\n                    // listen to the changes in the state - handles the case that the user logged out. \r\n                    this.changeHistory();\r\n                })\r\n        );\r\n        // callback for set socket listeners function\r\n        this.setSocketListeners();\r\n    }\r\n\r\n    // stop subscribing after leaving the component\r\n    componentWillUnmount() {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    // in any change of user type or login status redirect\r\n    componentDidUpdate = () =>{\r\n        if (!store.getState().isUserLoggedIn){\r\n            this.props.history.push(\"/\");\r\n        }\r\n        if (store.getState().userType !== \"ADMIN\"){\r\n            this.props.history.push(\"/vacationsBoard\");\r\n        }\r\n    }\r\n\r\n    private setSocketListeners = () =>{\r\n        // listener for vacation likes from socket \r\n        this.state.socket.on(\"increase-vacation-likes\", (vacationID: number) => {\r\n            let selectedIndex = this.getIndexFromVacations(vacationID);\r\n            let allVacations = this.state.vacations;\r\n\r\n            // increase vacation followers by 1\r\n            allVacations[selectedIndex].followersAmount = allVacations[selectedIndex].followersAmount+1;\r\n            this.setState({vacations: allVacations});\r\n        });  \r\n\r\n        // listener for vacation dislikes from socket\r\n        this.state.socket.on(\"decrease-vacation-likes\", (vacationID: number) => {\r\n            let selectedIndex = this.getIndexFromVacations(vacationID);\r\n            let allVacations = this.state.vacations;\r\n            \r\n            // decrease vacation followers by 1\r\n            allVacations[selectedIndex].followersAmount = allVacations[selectedIndex].followersAmount-1;\r\n            this.setState({vacations: allVacations});\r\n        });\r\n\r\n        // get added vacation from socket\r\n        this.state.socket.on(\"add-vacation\", (newVacation: Vacation) => {\r\n            newVacation.fromDate = this.changeDateFormat(newVacation.fromDate);\r\n            newVacation.toDate = this.changeDateFormat(newVacation.toDate);\r\n\r\n            // push new vacation to vacations array\r\n            let allVacations = this.state.vacations;\r\n            allVacations.push(newVacation);\r\n            this.setState({vacations: allVacations});\r\n        });\r\n    }\r\n\r\n    private changeHistory = async () =>{\r\n        if (!this.state.isUserLoggedIn){\r\n            this.props.history.push(\"/\");\r\n        }\r\n    } \r\n\r\n    // returns index of vacation that needs update \r\n    private getIndexFromVacations = (vacationID: number) =>{\r\n        let allVacations = this.state.vacations\r\n        let selectedIndex = allVacations.findIndex(\r\n            x => x.id === vacationID\r\n        );\r\n        return selectedIndex;\r\n    }\r\n\r\n    // opens various modals for admin\r\n    private openEditVacationModal(vacation: Vacation){\r\n        store.dispatch({ type: ActionType.handleVacationEditModal, payload: [vacation, true] });\r\n        this.setState({isEditModalVisible: true});\r\n    }\r\n    private openNewVacationModal(){\r\n        store.dispatch({ type: ActionType.handleNewVacationModal, payload: [new Vacation(0, \"\", \"\" , new File([\"\"], \"\"), \"\" ,\"\" ,0 ,false ,0),true] });\r\n        this.setState({isNewVacationModalVisible: true});\r\n    }\r\n    private openAdminGraphModal(){\r\n        store.dispatch({ type: ActionType.handleAdminGraphVisibility, payload: true });\r\n        this.setState({isAdminGraphVisible: true});\r\n    }\r\n    // hides the modals\r\n    private hideEditModal = () =>{\r\n        store.dispatch({ type: ActionType.handleVacationEditModal, payload: [false, false] });\r\n        this.setState({isEditModalVisible: false});\r\n    }\r\n    private hideNewVacationModal = () =>{\r\n        this.setState({isNewVacationModalVisible: false});\r\n    }\r\n    private hideAdminGraphModal = () =>{\r\n        this.setState({isAdminGraphVisible: false});\r\n    }\r\n\r\n    // function that happens after vacation was edited \r\n    private saveEditChanges = (updatedVacation:Vacation) =>{\r\n        let allVacations = this.state.vacations;\r\n\r\n        // replace the old vacation with the edited one\r\n        allVacations = allVacations.map(vacation => {\r\n            if (vacation.id === updatedVacation.id){\r\n                return updatedVacation;\r\n            }\r\n            return vacation;\r\n        });\r\n        \r\n        this.setState({vacations: allVacations});\r\n        // emit to all users the updated vacation\r\n        this.state.socket.emit(\"update-vacation\", updatedVacation);\r\n    }\r\n\r\n    // prompts delete dialog (just confirmation)\r\n    private promptDeleteDialog = (vacation: Vacation) =>{\r\n        confirmAlert({\r\n            title: 'Confirm to submit',\r\n            message: 'Are you sure to delete the vacation to ' + vacation.destination,\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => this.deleteVacation(vacation)\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => {return}\r\n              }\r\n            ]\r\n          });\r\n\r\n    }\r\n\r\n    // dates come out in wrong format, so this function just reformatting the dates to match the other vacations\r\n    private changeDateFormat = (date: string):string =>{\r\n        let newDateArray = date.split(\"-\");\r\n        let newDate = newDateArray[2] + \"/\" + newDateArray[1] + \"/\" + newDateArray[0];\r\n        \r\n        return newDate;\r\n    }\r\n    \r\n    private deleteVacation = async (vacation: Vacation) =>{\r\n        try {\r\n            // send the server post with the vacation id to delete from DB\r\n            await axios.post(\"https://adar-vacations.herokuapp.com/vacations/deleteVacation/\"+vacation.id);\r\n            \r\n            let vacations = this.state.vacations;\r\n            let index = vacations.indexOf(vacation);\r\n\r\n            // remove the vacation from vacations array\r\n            vacations.splice(index, 1);\r\n            this.setState({vacations});\r\n            \r\n            // send everybody the deleted vacation id so they will delete it too\r\n            this.state.socket.emit(\"delete-vacation\", vacation.id);\r\n\r\n            toast.success(\"The vacation was deleted successfuly.\");\r\n        }\r\n        // catch on failure\r\n        catch (err) {\r\n            toast.error(err.response.data.error);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"allVacationsBoard\" className=\"scrollbar scrollbar-morpheus-den\">\r\n            <h1 className=\"headers\">Manage Vacations</h1>\r\n                <div>\r\n                {this.state.vacations.map( (vacation, index) => \r\n                        <div key={index} className=\"card\">\r\n                            <img className=\"card-img-top\" src={vacation.picture.toString()} alt=\"../../UndefinedPictures/defaultPicture.jpg\"></img>\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{vacation.destination}</h5>\r\n                                <p className=\"desc\">{vacation.description}</p>\r\n                                <p className=\"card-text\"><b>From Date: </b>{vacation.fromDate}</p>\r\n                                <p className=\"card-text\"><b>To Date: </b>{vacation.toDate}</p>\r\n                                <h5 className=\"card-title\">{vacation.price}$</h5>\r\n                                <div className=\"cardIcons\">\r\n                                    <span className=\"material-icons\" onClick={()=>{this.promptDeleteDialog(vacation)}}>delete_forever</span>\r\n                                    <span className=\"material-icons\" onClick={()=>{this.openEditVacationModal(vacation)}}>build</span>\r\n                                    <span className=\"followersAmount\" id={JSON.stringify(vacation.id)}>\r\n                                    &hearts; {vacation.followersAmount}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div id=\"adminButtonsDiv\">\r\n                    <Button onClick={()=>{this.openAdminGraphModal()}}>Show Graph <img src={graphPicture} alt=\"\" /></Button>\r\n                    <Button onClick={()=>{this.openNewVacationModal()}}>New Vacation<img src={newIcon} alt=\"\" /></Button>\r\n                </div>\r\n\r\n                {this.state.isEditModalVisible === true && <EditModal hideModal={this.hideEditModal} saveEditChanges={this.saveEditChanges}/>}\r\n                {this.state.isNewVacationModalVisible === true && <NewVacationModal hideModal={this.hideNewVacationModal}/>}\r\n                {this.state.isAdminGraphVisible === true && <AdminGraph props={this.state.vacations} hideModal={this.hideAdminGraphModal}/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import  React from  \"react\";\r\nimport { Route, Redirect } from  \"react-router-dom\";\r\nimport { store } from \"../../redux/store\";\r\n\r\nconst  PrivateRoute: React.FC<{\r\n        component: any;\r\n        path: string;\r\n        exact: boolean;\r\n    }> = (props) => {\r\n\r\n    const condition = isLoggedIn();\r\n\r\n    return  condition ? (<Route  path={props.path}  exact={props.exact} component={props.component} />) : \r\n        (<Redirect  to=\"/\"  />);\r\n};\r\n\r\nconst isLoggedIn = () =>{\r\n    return store.getState().isUserLoggedIn;\r\n}\r\n\r\nexport  default  PrivateRoute;","import React, { Component } from 'react';\r\nimport Header from '../Header/Header';\r\nimport Login from '../Login/Login';\r\nimport AllVacationsBoard from '../AllVacationsBoard/AllVacationsBoard';\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"; \r\nimport Footer from '../Footer/Footer';\r\nimport \"./Layout.css\";\r\nimport Register from '../Register/Register';\r\nimport Admin from \"../Admin/Admin\";\r\nimport PrivateRoute from '../PrivateRoute/PrivateRoute';\r\n\r\n\r\nexport default class Layout extends Component{\r\n    render() {\r\n        return (\r\n            <div id=\"layout\"> \r\n                <Header />\r\n\r\n                <div id=\"mainDiv\">\r\n                    <BrowserRouter>\r\n                        <Switch>\r\n                            <Route path=\"/\" component={Login} exact / >\r\n                            <Route path=\"/register\" component={Register} exact / >\r\n                            <PrivateRoute path=\"/vacationsboard\" component={AllVacationsBoard} exact />\r\n                            <PrivateRoute path=\"/admin\" component={Admin} exact / >\r\n                        </Switch>\r\n                    </BrowserRouter>\r\n                </div>\r\n                \r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Layout from './components/Layout/Layout';\nimport { ToastContainer } from 'react-toastify';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastContainer position=\"top-center\"/>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}